<Window x:Class="tcpTrigger.Manager.HelpWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="tcpTrigger Guide"
        UseLayoutRounding="True"
        Height="555"
        Width="750"
        MinHeight="200"
        MinWidth="500"
        Background="#1d1d1d"
        WindowStartupLocation="CenterScreen"
        PreviewKeyDown="Window_PreviewKeyDown"
        Loaded="Window_Loaded"
        Closed="Window_Closed">

    <Window.Resources>
        <Style TargetType="{x:Type TextBlock}">
            <Setter Property="TextWrapping" Value="Wrap" />
            <Setter Property="FontSize" Value="16" />
        </Style>
        <Style TargetType="{x:Type Paragraph}">
            <Setter Property="TextAlignment" Value="Left" />
            <Setter Property="FontFamily" Value="Segoe UI, Arial" />
            <Setter Property="FontSize" Value="15" />
        </Style>

        <!-- Title style -->
        <Style x:Key="TitleText"
               TargetType="{x:Type TextBlock}"
               BasedOn="{StaticResource {x:Type TextBlock}}">
            <Setter Property="Margin" Value="0,0,0,0" />
            <Setter Property="FontSize" Value="26" />
            <Setter Property="Foreground" Value="#f4f4f4" />
            <Setter Property="FontFamily" Value="Segoe UI" />
            <Setter Property="FontWeight" Value="SemiBold" />
            <Setter Property="HorizontalAlignment" Value="Center" />
        </Style>

        <!-- HyperLink style -->
        <Style x:Key="HyperlinkStyle"
               TargetType="{x:Type Hyperlink}"
               BasedOn="{StaticResource {x:Type Hyperlink}}">
            <Setter Property="TextDecorations" Value="None" />
            <Setter Property="FontSize" Value="16" />
            <Setter Property="Foreground" Value="#6c71c4" />
            <Setter Property="KeyboardNavigation.IsTabStop" Value="False" />
        </Style>

        <!-- Version style -->
        <Style x:Key="VersionText"
               TargetType="{x:Type Paragraph}"
               BasedOn="{StaticResource {x:Type Paragraph}}">
            <Setter Property="FontSize" Value="14" />
            <Setter Property="Foreground" Value="#909090" />
            <Setter Property="Margin" Value="0,0,0,0" />
            <Setter Property="TextAlignment" Value="Center" />
        </Style>

        <!-- Section header style -->
        <Style x:Key="HeaderText"
               TargetType="{x:Type Paragraph}"
               BasedOn="{StaticResource {x:Type Paragraph}}">
            <Setter Property="FontWeight" Value="Bold" />
            <Setter Property="Margin" Value="0,45,0,0" />
            <Setter Property="Foreground" Value="#ffd43b" />
            <Setter Property="FontSize" Value="26" />
        </Style>

        <!-- Sub-header style -->
        <Style x:Key="SubHeaderText"
               TargetType="{x:Type Paragraph}"
               BasedOn="{StaticResource {x:Type Paragraph}}">
            <Setter Property="FontWeight" Value="Bold" />
            <Setter Property="Margin" Value="0,25,0,0" />
            <Setter Property="Foreground" Value="#63e6be" />
            <Setter Property="FontSize" Value="16" />
        </Style>

        <!-- Paragraph style -->
        <Style x:Key="ParagraphText"
               TargetType="{x:Type Paragraph}"
               BasedOn="{StaticResource {x:Type Paragraph}}">
            <Setter Property="Margin" Value="0,2,0,0" />
            <Setter Property="Foreground" Value="#f0f0f0" />
        </Style>
        
        <!-- Defaults style -->
        <Style x:Key="DefaultsText"
               TargetType="{x:Type Paragraph}"
               BasedOn="{StaticResource ResourceKey=ParagraphText}">
            <Setter Property="Margin" Value="15,15,0,0"/>
            <Setter Property="FontWeight" Value="SemiBold"/>
        </Style>

        <!-- Variables style -->
        <Style x:Key="VariablesText"
               TargetType="{x:Type Paragraph}"
               BasedOn="{StaticResource ResourceKey=DefaultsText}">
            <Setter Property="FontFamily" Value="Consolas"/>
            <Setter Property="Foreground" Value="#cd6ed1"/>
        </Style>
    </Window.Resources>

    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>
        
        <!-- Navigation tree -->
        <TreeView Name="tree"
                  BorderThickness="0"
                  Padding="0,20,0,0"
                  FontSize="14"
                  Background="#2d2d30">
            <TreeView.ItemContainerStyle>
                <Style TargetType="{x:Type TreeViewItem}">
                    <Style.Resources>
                        <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="Transparent" />
                        <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}" Color="#4198df" />
                        <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="#262626" />
                        <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}" Color="#cd6ed1" />
                    </Style.Resources>

                    <Setter Property="Foreground" Value="#f4f4f4"/>
                    <Setter Property="Margin" Value="0,3,20,3"/>
                    <Setter Property="BorderThickness" Value="1"/>
                    <Setter Property="BorderBrush" Value="Transparent"/>
                    <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                    <Style.Triggers>
                        <Trigger Property="Grid.IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="#61b8ff"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </TreeView.ItemContainerStyle>
            <TreeViewItem Header="Overview"
                          Selected="Overview_Selected" />
            <TreeViewItem Header="Deployment Guide"
                          Selected="DeploymentGuide_Selected" />
            <TreeViewItem Header="Trigger Rules"
                          Selected="TriggerRules_Selected" />
            <TreeViewItem Header="Actions"
                          Selected="Actions_Selected" />
            <TreeViewItem Header="Email Notifications"
                          Selected="Email_Selected" />
            <TreeViewItem Header="Whitelist"
                          Selected="Whitelist_Selected" />
            <TreeViewItem Header="Devices"
                          Selected="Devices_Selected" />
            <TreeViewItem Header="Service Status"
                          Selected="Status_Selected"/>
        </TreeView>
        
        <GridSplitter Grid.Column="1" Width="4"
                      HorizontalAlignment="Center"
                      Focusable="False"
                      BorderBrush="Black"
                      BorderThickness="0"
                      VerticalAlignment="Stretch" />
        
        <!-- Flow document -->
        <FlowDocumentScrollViewer Name="MainDocument" Grid.Column="2" FocusVisualStyle="{x:Null}" PreviewMouseWheel="MainDocument_PreviewMouseWheel">
            <FlowDocument>
                <!-- Logo and title -->
                <BlockUIContainer Name="TopOfDocument">
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" Margin="0,10,0,20">
                        <TextBlock Style="{StaticResource TitleText}"
                                   VerticalAlignment="Center"
                                   Text="tcpTrigger">
                            <TextBlock.Effect>
                                <DropShadowEffect ShadowDepth="4" Direction="330" Color="Black" Opacity="0.15" BlurRadius="4" />
                            </TextBlock.Effect>
                        </TextBlock>
                    </StackPanel>
                </BlockUIContainer>

                <!-- Link to homepage -->
                <Paragraph TextAlignment="Center">
                    <Hyperlink NavigateUri="https://github.com/r-smith/tcptrigger"
                               RequestNavigate="Hyperlink_RequestNavigate"
                               Style="{StaticResource HyperlinkStyle}">
                        https://github.com/r-smith/tcptrigger
                    </Hyperlink>
                </Paragraph>

                <!-- Version -->
                <Paragraph Name="Version"
                           Style="{StaticResource  VersionText}"
                           Margin="0,3,0,0">
                    Version X.XXXX.XXXX
                </Paragraph>
                <Paragraph Name="Copyright"
                           Style="{StaticResource VersionText}"
                           FontSize="13">
                    Created by Ryan Smith
                </Paragraph>

                <!-- Overview -->
                <BlockUIContainer>
                    <Rectangle Margin="0,30,0,0" HorizontalAlignment="Stretch" Fill="#f0f0f0" Height="1" />
                </BlockUIContainer>
                <Paragraph Margin="0,5"
                           Foreground="#e0e0e0">
                    tcpTrigger detects incoming network connections and then performs various actions upon detection.
                    It runs in the background as a Windows service.
                    This utility, tcpTrigger Manager, lets you view and manage all options available
                    to the tcpTrigger service. A separate utility, tcpTrigger Monitor, provides a
                    real time view of network activity detected by tcpTrigger.
                </Paragraph>
                <BlockUIContainer>
                    <Rectangle HorizontalAlignment="Stretch" Fill="#f0f0f0" Height="1" />
                </BlockUIContainer>

                <!-- Deployment Guide -->
                <Paragraph Name="DeploymentGuide"
                           Style="{StaticResource HeaderText}">
                    Deployment Guide
                </Paragraph>
                <Paragraph Style="{StaticResource SubHeaderText}">
                    Basic Setup
                </Paragraph>
                <Paragraph Style="{StaticResource ParagraphText}">
                    Download and install the latest version of tcpTrigger from
                    <Hyperlink NavigateUri="https://github.com/r-smith/tcptrigger"
                               RequestNavigate="Hyperlink_RequestNavigate"
                               Style="{StaticResource HyperlinkStyle}">
                        https://github.com/r-smith/tcptrigger
                    </Hyperlink>.
                    After installation, launch tcpTrigger Manager to
                    create the required settings file. Setup is easy:
                    Use the <Bold><Italic>Rules</Italic></Bold>
                    tab to define what network
                    activity tcpTrigger should detect, and then use the
                    <Bold><Italic>Actions</Italic></Bold> tab to select
                    what happens upon detection.
                    If you decide to enable email notifications, use the
                    <Bold><Italic>Email</Italic></Bold> tab for all mail-related options.
                    If you want to ignore connections from certain IP
                    addresses, enter that information in the <Bold><Italic>Whitelist</Italic></Bold>
                    tab. Finally, click <Bold><Italic>Save</Italic></Bold> to create your initial settings
                    file and start the tcpTrigger service. tcpTrigger runs
                    in the background as a Windows service and starts
                    automatically when your computer boots. Relaunch
                    tcpTrigger Manager at any time to adjust your settings.
                </Paragraph>
                <Paragraph Style="{StaticResource SubHeaderText}">
                    Deployment: Internal Honeypot
                </Paragraph>
                <Paragraph Style="{StaticResource ParagraphText}">
                    The primary objective of tcpTrigger is to provide simple
                    intrusion detection inside your enterprise network.
                    The application does not require complicated rules
                    or configurations, it does not require maintenance or
                    upkeep; and still, effectively alerts you of intruders,
                    with practically zero false positives. It basically
                    works as an internal honeypot. You install tcpTrigger
                    on a system that serves no other legitimate purpose.
                    If your system is then probed in any way whatsoever,
                    you immediately receive an email notification.
                    No, this will not catch every intruder. But you should
                    be practicing defense in depth. tcpTrigger is simply
                    another tool in your toolbox.
                    <LineBreak/>
                    <LineBreak/>
                    <Italic>
                        This deployment scenario assumes your enterprise
                        network is a Windows environment with Active Directory.
                    </Italic>
                    <LineBreak/>
                    <LineBreak/>
                    Install tcpTrigger on a dedicated system. Preferably,
                    install on a server-based operating system. The computer
                    name in Windows should be set to a name that makes your
                    system appear like it serves an important function.
                    This step is essential. Names that make the system look
                    like a crucial finance server, file server, database server,
                    backup server, or email server are good examples.
                    The name should conform to the naming scheme used
                    in your environment, but also named to entice potential
                    intruders. The system should be joined to your Active
                    Directory Domain.
                    <LineBreak/>
                    <LineBreak/>
                    Why install on a server operating system, provide a
                    fake computer name, and join to Active Directory?
                    If an intruder gains access to your network through
                    a compromised user account, they are likely to
                    query Active Directory for a list of computers.
                    This will give them every Windows computer on your
                    network, along with the name and operating system
                    version. You need your tcpTrigger system to
                    appear in that query. It needs to blend in with
                    your environment yet appear like an important
                    server. The goal here is to attract intruders to
                    your system.
                    <LineBreak/>
                    <LineBreak/>
                    You also want to catch cases where an intruder
                    is attempting to locate targets using traditional
                    port scanning. In this case, you want to increase
                    the odds that your system gets probed in a port scan.
                    Your tcpTrigger system should be on the same subnet
                    as other core network services. Place it on the same
                    subnet as your DNS servers, DHCP servers, or any
                    other subnet that hosts important servers. Ensure
                    your system has a reverse DNS entry registered.
                    Performing a DNS lookup against the IP address of
                    your system, should resolve to the fake computer
                    name you chose.
                    Remember that tcpTrigger listens on all IP addresses
                    in Windows. You can put multiple NICs and/or assign
                    multiple IP addresses to your tcpTrigger system.
                    <LineBreak/>
                    <LineBreak/>
                    For the configuration of tcpTrigger itself, the
                    default settings are a great starting place.
                    You should monitor ICMP requests and TCP connections
                    on all ports. If you choose to also monitor UDP,
                    expect to do additional tuning. You should enable
                    logging to both a text log and the Windows event log.
                    The event log is useful if you plan on sending
                    detections to a SIEM. The text log makes it easy
                    to review past detections. And unless you are
                    utilizing a SIEM, email notifications should
                    always be enabled (and tested). Though you might
                    want to wait until initial tuning is complete
                    before enabling email notifications.
                    <LineBreak/>
                    <LineBreak/>
                    Once the initial configuration is done, be
                    sure to save your settings and start the tcpTrigger
                    service. Expect to do some tuning, as you will
                    likely detect connections that should be ignored.
                    If you have uptime monitoring software, asset
                    management software, or similar software on your
                    network, you will probably see connections from those
                    services. Ignore such systems by adding them to
                    tcpTrigger's whitelist. If you have IT staff that
                    typically scans the network, they will need to be
                    added to the whitelist, or they need to ensure their
                    scanning excludes IP addresses for tcpTrigger systems.
                    If tcpTrigger is detecting connections and you
                    are unsure of the source, a network analyzer,
                    such as Wireshark, will aid immensely.
                    You might need to monitor for a week or more
                    before your filters are fully tuned. The goal here
                    is zero false positives. When you get a detection
                    alert from tcpTrigger, it should either be from
                    IT staff, an employee poking around, new software
                    on the network, or a malicious intruder.
                    <LineBreak/>
                    <LineBreak/>
                    You should test to ensure tcpTrigger is
                    detecting everything it is supposed to and
                    performing all the actions you expect it to.
                    Use the tcpTrigger Monitor utility to watch
                    detection logs in real time. To test specific
                    TCP ports, use the PowerShell command:
                </Paragraph>
                <Paragraph Style="{StaticResource VariablesText}" Margin="15,10,0,10">
                    Test-NetConnection -ComputerName <Italic>&lt;tcptrigger_IP&gt;</Italic>
                    -Port <Italic>&lt;port_number_to_test&gt;</Italic>
                </Paragraph>
                <Paragraph Style="{StaticResource ParagraphText}">
                    To test ICMP detection, use the command:
                </Paragraph>
                <Paragraph Style="{StaticResource VariablesText}" Margin="15,10,0,10">
                    ping -n 1 <Italic>&lt;tcptrigger_IP&gt;</Italic>
                </Paragraph>
                <Paragraph Style="{StaticResource ParagraphText}">
                    Ensure you use the actual tcpTrigger IP address,
                    and not 127.0.0.1. If tcpTrigger is
                    not detecting your probes, it is likely
                    due to the Windows firewall. The most common probes
                    you want to detect in a Windows environment, are TCP
                    ports: 135, 137, 139, 445, and 3389. Ensure at least
                    some of those ports are detected by
                    tcpTrigger and ensure ICMP pings are detected
                    as well. Adjust your firewall if necessary.
                    <LineBreak/>
                    <LineBreak/>
                    Develop an incident response plan. If you
                    receive a detection alert from tcpTrigger,
                    do you know exactly how to track down
                    the source of the connection? What other steps
                    should be taken in response to an alert?
                    Ensure everything is clearly documented
                    and understood by you and your team.
                    It can be helpful to include brief incident
                    response steps in your notification emails.
                    <LineBreak/>
                    <LineBreak/>
                    Notification emails should go to multiple
                    recipients or a distribution list. The email
                    notifications should be tested to verify receipt.
                    Ensure every recipient understands
                    what tcpTrigger does, where it is running,
                    how it is configured, and how to interpret the
                    alerts. Ensure every recipient has a clear understanding
                    of your incident response plan. Finally, test your incident
                    response to ensure success.
                </Paragraph>
                <Paragraph Style="{StaticResource SubHeaderText}">
                    Deployment: Personal Connection Notifier
                </Paragraph>
                <Paragraph Style="{StaticResource ParagraphText}">
                    The secondary intent of tcpTrigger is to provide
                    a personal intrusion detection system.
                    <LineBreak/>
                    <LineBreak/>
                    In this deployment scenario, install tcpTrigger
                    on your personal computer. Once running,
                    tcpTrigger will record when your computer
                    is probed on the network in any way.
                    All network interfaces are monitored by
                    tcpTrigger. It also detects new network interfaces
                    while the system is running, and changes such as a
                    new Wi-Fi connection or a new dynamic IP address.
                    <LineBreak/>
                    <LineBreak/>
                    Setup of tcpTrigger itself is like the
                    honeypot deployment scenario. The default settings
                    might be all you need. You should detect
                    ICMP requests, and TCP connections on all ports.
                    You should log to both a plain text log and the Windows
                    event log. Email notifications are optional.
                    Exclude any TCP ports you do not need to monitor
                    and populate the whitelist with any
                    connections you want to ignore.
                    <LineBreak/>
                    <LineBreak/>
                    Use the included tcpTrigger Monitor utility to view your
                    detection logs in real time. It is designed to run
                    in the background at all times, though certainly
                    not required. It can minimize to the system tray so
                    that it stays out of the way, and optionally start
                    automatically when you log in to Windows. When new
                    network activity is detected, the window will pop
                    up with the activity log. That way you are immediately
                    notified of incoming connections. Again, this
                    utility is entirely optional, but very helpful.
                    <LineBreak/>
                    <LineBreak/>
                    It is also important to understand what tcpTrigger
                    considers an incoming TCP 'connection'.
                    The TCP protocol defines a
                    handshake process that must be performed in
                    order to establish a connection. tcpTrigger
                    detects when such a handshake is being initiated.
                    Detection by tcpTrigger does not indicate
                    whether a connection was fully established.
                    This behavior is desired in order to catch
                    all port scans and probes against your system.
                    If tcpTrigger detects a connection to a port
                    where you have nothing listening, then no
                    connection is established, it is merely the attempt
                    that is detected.
                </Paragraph>
                <Paragraph Style="{StaticResource SubHeaderText}">
                    Other Deployment Notes
                </Paragraph>
                <Paragraph Style="{StaticResource ParagraphText}">
                    This concludes the tcpTrigger deployment guide. You might
                    find other use cases that fit your needs as well. While
                    not an intended use case, you could place tcpTrigger on
                    your perimeter network as a method of logging incoming
                    connections from the internet. You might also come
                    up with creative uses for the action that triggers an
                    external script.
                    <LineBreak/>
                    <LineBreak/>
                    The remaining sections in this guide document
                    the available options in the tcpTrigger Manager
                    utility.
                </Paragraph>

                <!-- Trigger Rules -->
                <Paragraph Name="TriggerRules"
                           Style="{StaticResource HeaderText}">
                    Trigger Rules
                </Paragraph>
                <Paragraph Style="{StaticResource ParagraphText}">
                    Use the <Bold><Italic>Rules</Italic></Bold> tab to choose what network activity you want to detect.
                </Paragraph>
                <!-- ICMP -->
                <Paragraph Style="{StaticResource SubHeaderText}">
                    Detect ICMP requests
                </Paragraph>
                <Paragraph Style="{StaticResource ParagraphText}">
                    Enable this option to detect when you receive an incoming ping request. ICMP timestamp and netmask
                    requests are detected as well.
                </Paragraph>
                <Paragraph Style="{StaticResource DefaultsText}">
                    <Run Foreground="#30aacc">[Default]</Run>
                    <LineBreak/>
                    Enabled
                </Paragraph>
                <!-- TCP -->
                <Paragraph Style="{StaticResource SubHeaderText}">
                    Detect TCP connections
                </Paragraph>
                <Paragraph Style="{StaticResource ParagraphText}">
                    Enable this option to detect incoming network connections to any port.
                    Detection occurs at the start of the TCP handshake process.
                    This ensures all attempts are detected and does not indicate
                    whether the connection was fully established.
                    <LineBreak/>
                    <LineBreak/>
                    Use the
                    <Italic>include ports</Italic> field to list which ports you want
                    to monitor. Typically, you would include all TCP ports, and there is an
                    option provided to do so. Use the
                    <Italic>exclude ports</Italic> field
                    to list ports you do not want to monitor. Excluded ports override included ports.
                    When entering ports, use a comma to list multiple ports and a hyphen to enter
                    ranges of ports.
                    <LineBreak/>
                    <LineBreak/>
                    <Run FontWeight="SemiBold">Example:</Run>
                    <Run FontWeight="SemiBold" Foreground="#cd6ed1">21, 23-25, 3389, 4450-5000</Run>
                </Paragraph>
                <Paragraph Style="{StaticResource DefaultsText}">
                    <Run Foreground="#30aacc">[Default]</Run>
                    <LineBreak/>
                    Enabled
                    <LineBreak/>
                    Include: ALL
                </Paragraph>
                <!-- UDP -->
                <Paragraph Style="{StaticResource SubHeaderText}">
                    Detect UDP communication
                </Paragraph>
                <Paragraph Style="{StaticResource ParagraphText}">
                    Enable this option to detect incoming UDP communication. Be aware that UDP is a
                    connectionless protocol, and tcpTrigger is not able to detect if incoming data is standard
                    reply traffic. For example, if your machine makes an outgoing DNS request, the
                    response from the DNS server might trigger your detection rules even though the
                    communications was initiated by you. If unsure, leave this option disabled.
                    <LineBreak/>
                    <LineBreak/>
                    If you are still interested in detecting UDP traffic, the following rules make a good starting point:
                    <Run FontWeight="SemiBold" Foreground="#ffffff">Include:</Run>
                    <Run FontWeight="SemiBold" Foreground="#cd6ed1">ALL,</Run>
                    <Run FontWeight="SemiBold" Foreground="#ffffff">Exclude:</Run>
                    <Run FontWeight="SemiBold" Foreground="#cd6ed1">68, 123, 49152-65535.</Run>
                </Paragraph>
                <Paragraph Style="{StaticResource DefaultsText}">
                    <Run Foreground="#30aacc">[Default]</Run>
                    <LineBreak/>
                    Disabled
                </Paragraph>
                <!-- DHCP -->
                <Paragraph Style="{StaticResource SubHeaderText}">
                    Rogue DHCP detection
                </Paragraph>
                <Paragraph Style="{StaticResource ParagraphText}">
                    Enabling this option detects any acting DHCP server on the network.
                    Rogue DHCP servers are not always malicious, and can come from network misconfigurations,
                    or someone carelessly plugging in a home router or other device onto the network.
                    Detection is limited to the broadcast traffic visible to your computer. As such,
                    detection across subnets is unlikely. If unsure, leave this option disabled.
                    <LineBreak/>
                    <LineBreak/>
                    To setup, type your known good and expected DHCP servers into the
                    <Italic>Known DHCP servers</Italic> field.
                    Servers must be entered by their IP address. Use a comma to enter multiple addresses.
                </Paragraph>
                <Paragraph Style="{StaticResource DefaultsText}">
                    <Run Foreground="#30aacc">[Default]</Run>
                    <LineBreak/>
                    Disabled
                </Paragraph>

                <!-- Actions  -->
                <Paragraph Name="Actions"
                           Style="{StaticResource HeaderText}">
                    Actions
                </Paragraph>
                <Paragraph Style="{StaticResource ParagraphText}">
                    Use the
                    <Bold><Italic>Actions</Italic></Bold>
                    tab to choose what actions should occur when a connection is detected.
                </Paragraph>
                <!-- Standard log -->
                <Paragraph Style="{StaticResource SubHeaderText}">
                    Write to standard log
                </Paragraph>
                <Paragraph Style="{StaticResource ParagraphText}">
                    Enable this option to record a log of connections to a plain text file.
                    Log files are limited to 15 MB in size and will rotate to the file extension
                    .log-1 if exceeded. It is best to use the default path,
                    but if you choose an alternate path, ensure the tcpTrigger service has
                    the necessary read and write permissions.
                </Paragraph>
                <Paragraph Style="{StaticResource DefaultsText}">
                    <Run Foreground="#30aacc">[Default]</Run>
                    <LineBreak/>
                    Enabled
                    <LineBreak/>
                    C:\ProgramData\tcpTrigger\tcpTrigger.log
                </Paragraph>
                <!-- Event log -->
                <Paragraph Style="{StaticResource SubHeaderText}">
                    Write to Windows event log
                </Paragraph>
                <Paragraph Style="{StaticResource ParagraphText}">
                    Enable this option to record detected connections to the Windows event log.
                    This option is highly recommended and is used by the included log monitoring utility.
                    Events are written to the
                    <Run FontWeight="SemiBold" FontStyle="Italic">Application</Run> log using
                    <Run FontWeight="SemiBold" FontStyle="Italic">tcpTrigger</Run>
                    as the event source. This option is useful for sending tcpTrigger events to a SIEM.
                    <LineBreak/>
                    <LineBreak/>
                    <Run FontWeight="SemiBold" Foreground="#ffffff" FontFamily="Consolas">[Event code: 200]</Run>
                    <Run FontWeight="SemiBold" Foreground="#cd6ed1" FontFamily="Consolas">Detected ICMP request</Run>
                    <LineBreak/>
                    <Run FontWeight="SemiBold" Foreground="#ffffff" FontFamily="Consolas">[Event code: 201]</Run>
                    <Run FontWeight="SemiBold" Foreground="#cd6ed1" FontFamily="Consolas">Detected TCP connection</Run>
                    <LineBreak/>
                    <Run FontWeight="SemiBold" Foreground="#ffffff" FontFamily="Consolas">[Event code: 202]</Run>
                    <Run FontWeight="SemiBold" Foreground="#cd6ed1" FontFamily="Consolas">Detected UDP communication</Run>
                    <LineBreak/>
                    <Run FontWeight="SemiBold" Foreground="#ffffff" FontFamily="Consolas">[Event code: 203]</Run>
                    <Run FontWeight="SemiBold" Foreground="#cd6ed1" FontFamily="Consolas">Detected rogue DHCP server</Run>
                    <LineBreak/>
                    <LineBreak/>
                    This option has no effect on the general diagnostic and status events used by the tcpTrigger service.
                    Diagnostic events can be viewed using the <Bold>Status</Bold> tab.
                </Paragraph>
                <Paragraph Style="{StaticResource DefaultsText}">
                    <Run Foreground="#30aacc">[Default]</Run>
                    <LineBreak/>
                    Enabled
                </Paragraph>
                <!-- Send email -->
                <Paragraph Style="{StaticResource SubHeaderText}">
                    Send a notification email
                </Paragraph>
                <Paragraph Style="{StaticResource ParagraphText}">
                    Enable this option to send an email notification when a detection rule is matched. Use
                    the
                    <Bold><Italic>Email</Italic></Bold>
                    tab for configuring all options relating to email notifications. This option is highly
                    recommended if tcpTrigger is running on an unattended system.
                </Paragraph>
                <Paragraph Style="{StaticResource DefaultsText}">
                    <Run Foreground="#30aacc">[Default]</Run>
                    <LineBreak/>
                    Disabled
                </Paragraph>
                <!-- External app -->
                <Paragraph Name="ExternalApp" Style="{StaticResource SubHeaderText}">
                    Launch an external application
                </Paragraph>
                <Paragraph Style="{StaticResource ParagraphText}">
                    Enable this option to call an external application or script when connection attempts are detected.
                    The application you choose must execute and automatically exit without any user interaction. There
                    are several optional variables, listed below, that can be entered into the
                    <Italic>Arguments</Italic> field. For executing scripts in Windows, you likely need to point to the
                    script interpreter in the <Italic>Application</Italic> field
                    and then pass your script path and arguments in the <Italic>Arguments</Italic> field.
                    <LineBreak/>
                    <LineBreak/>
                    For example, to run a PowerShell script, use the following as a starting point:
                </Paragraph>
                <Paragraph Style="{StaticResource VariablesText}" Margin="15,10,0,10">
                    <Run Foreground="White">Application:</Run>
                    powershell.exe<LineBreak/>
                    <Run Foreground="White">Arguments:</Run>
                    -ExecutionPolicy Bypass "c:\scripts\myscript.ps1" -SampleArgument {SOURCE_IP}
                </Paragraph>
                <Paragraph Style="{StaticResource ParagraphText}">
                    To run any command from the Windows command interpreter, use the following as a starting point:
                </Paragraph>
                <Paragraph Style="{StaticResource VariablesText}" Margin="15,10,0,10">
                    <Run Foreground="White">Application:</Run>
                    cmd.exe
                    <LineBreak/>
                    <Run Foreground="White">Arguments:</Run>
                    /C echo {TIMESTAMP} {SOURCE_IP}:{DESTINATION_PORT} >> c:\logs\connection.log
                </Paragraph>
                <Paragraph Style="{StaticResource ParagraphText}">
                    If your application does not appear to launch, use the <Bold>Status</Bold>
                    tab to aid in troubleshooting. This tab displays diagnostic events from
                    the tcpTrigger service and is updated in real time. Errors use Event ID 400.
                    If you do not see errors, check the
                    Windows task manager to see if the application appears in the process list.
                    Do not try to launch GUI applications or anything that waits for an input.
                    Doing so will cause them to launch and get stuck. Also, keep in mind that
                    tcpTrigger runs using the low privilege built-in
                    <Italic>Local Service</Italic> account. Your script might fail if
                    the <Italic>Local Service</Italic> account does not have the permissions
                    needed for what you are trying to execute. You can optionally run the
                    tcpTrigger service using a higher privilege built-in account or Domain
                    account, though this is not recommended.
                </Paragraph>
                <Paragraph Style="{StaticResource DefaultsText}">
                    <Run Foreground="#30aacc">[Default]</Run>
                    <LineBreak/>
                    Disabled
                </Paragraph>
                <!-- Variables -->
                <Paragraph Style="{StaticResource SubHeaderText}">
                    Variables
                </Paragraph>
                <Paragraph Style="{StaticResource ParagraphText}">
                    When calling an external script or application, placeholder variables can be used
                    in the <Italic>Arguments</Italic> field.
                </Paragraph>
                <Paragraph Style="{StaticResource VariablesText}">
                    {SOURCE_IP}<LineBreak/>
                    {SOURCE_PORT}<LineBreak/>
                    {SOURCE_HOSTNAME}<LineBreak/>
                    {DESTINATION_IP}<LineBreak/>
                    {DESTINATION_PORT}<LineBreak/>
                    {DESTINATION_HOSTNAME}<LineBreak/>
                    {DESTINATION_MAC}<LineBreak/>
                    {TIMESTAMP}<LineBreak/>
                    {MATCH_TYPE}<LineBreak/>
                    {TCP_FLAGS}
                </Paragraph>

                <!-- Email Notifications -->
                <Paragraph Name="EmailNotificaitons"
                           Style="{StaticResource HeaderText}">
                    Email Notifications: Mail Server
                </Paragraph>
                <Paragraph Style="{StaticResource SubHeaderText}">
                    SMTP server
                </Paragraph>
                <Paragraph Style="{StaticResource ParagraphText}">
                    Enter the address for your outgoing mail server.
                </Paragraph>
                <Paragraph Style="{StaticResource SubHeaderText}">
                    Port
                </Paragraph>
                <Paragraph Style="{StaticResource ParagraphText}">
                    Enter the port used by your outgoing mail server.
                    This is typically either 25 or 587.
                </Paragraph>
                <Paragraph Style="{StaticResource SubHeaderText}">
                    Enable SSL/TLS
                </Paragraph>
                <Paragraph Style="{StaticResource ParagraphText}">
                    Enable this option for encrypted communication with your mail server.
                    It is recommended to enable this option if supported by your
                    SMTP server, and it may even be required.
                    Only SMTP servers that advertise STARTTLS are supported.
                    If your SMTP server requires the SSL session to be
                    established up front (typically on port 465),
                    this is not supported.
                </Paragraph>
                <Paragraph Style="{StaticResource SubHeaderText}">
                    Authentication
                </Paragraph>
                <Paragraph Style="{StaticResource ParagraphText}">
                    If your SMTP server requires you to login,
                    check the option labeled 
                    <Italic>This server requires authentication,</Italic>
                    and then enter your mail server username and password.
                    Note that your credentials will be stored in the
                    tcpTrigger settings file in an encrypted format, however
                    the encryption key is viewable in the source
                    code published for this application. Ensure
                    access to your settings file is properly secured.
                </Paragraph>
                <Paragraph Style="{StaticResource SubHeaderText}">
                    Recipient address
                </Paragraph>
                <Paragraph Style="{StaticResource ParagraphText}">
                    Enter the email address that should receive email notifications from
                    tcpTrigger. Use a comma to enter multiple recipients.
                </Paragraph>
                <Paragraph Style="{StaticResource SubHeaderText}">
                    Sender address
                </Paragraph>
                <Paragraph Style="{StaticResource ParagraphText}">
                    This is the
                    <Italic>FROM</Italic> email address used by tcpTrigger when sending email notifications.
                </Paragraph>
                <Paragraph Style="{StaticResource SubHeaderText}">
                    Sender display name
                </Paragraph>
                <Paragraph Style="{StaticResource ParagraphText}">
                    Enter a friendly name to display as the sender for email notifications. This field is optional.
                </Paragraph>
                <!-- Message -->
                <Paragraph Style="{StaticResource HeaderText}">
                    Email Notifications: Message
                </Paragraph>
                <Paragraph Style="{StaticResource SubHeaderText}">
                    Email subject
                </Paragraph>
                <Paragraph Style="{StaticResource ParagraphText}">
                    Enter the message subject to use for email notifications.
                </Paragraph>
                <Paragraph Style="{StaticResource DefaultsText}">
                    <Run Foreground="#30aacc">[Default]</Run>
                    <LineBreak/>
                    Alert: Suspicious network activity
                </Paragraph>
                <Paragraph Style="{StaticResource SubHeaderText}">
                    Email body
                </Paragraph>
                <Paragraph Style="{StaticResource ParagraphText}">
                    Enter the message body to use for email notifications.
                </Paragraph>
                <Paragraph Style="{StaticResource DefaultsText}">
                    <Run Foreground="#30aacc">[Default]</Run>
                    <LineBreak/>
                    Network connections to {INTERFACE_IP} are being monitored. The following activity was detected:
                    <LineBreak/>
                    <LineBreak/>
                    {CONNECTION_LOG}
                </Paragraph>
                <Paragraph Style="{StaticResource SubHeaderText}">
                    Variables
                </Paragraph>
                <Paragraph Style="{StaticResource ParagraphText}">
                    When used in your message subject or body, placeholder variables are replaced with their
                    underlying values when a notification email is generated.
                </Paragraph>
                <Paragraph Style="{StaticResource VariablesText}">
                    {INTERFACE_IP}<LineBreak/>
                    {INTERFACE_DESCRIPTION}<LineBreak/>
                    {INTERFACE_MAC}<LineBreak/>
                    {CONNECTION_LOG}
                </Paragraph>
                <!-- Options -->
                <Paragraph Style="{StaticResource HeaderText}">
                    Email Notifications: Options
                </Paragraph>
                <!-- Rate limiting -->
                <Paragraph Style="{StaticResource SubHeaderText}">
                    Rate limiting
                </Paragraph>
                <Paragraph Style="{StaticResource ParagraphText}">
                    Rate limiting prevents email notifications from being sent too quickly. After an
                    email notification is sent, tcpTrigger will not send another email for at least
                    the number of seconds specified. All connections detected during the wait
                    period are logged and will be sent once the rate limit has passed.
                </Paragraph>
                <Paragraph Style="{StaticResource DefaultsText}">
                    <Run Foreground="#30aacc">[Default]</Run>
                    <LineBreak/>
                    300 seconds (5 minutes)
                </Paragraph>
                <!-- Buffering -->
                <Paragraph Style="{StaticResource SubHeaderText}">
                    Buffer connections
                </Paragraph>
                <Paragraph Style="{StaticResource ParagraphText}">
                    Buffering delays sending an initial email notification when a connection is detected. Delaying allows tcpTrigger
                    to log additional connections for a short time before sending the email. After the interval is up,
                    the notification email is sent with a log of all connections that occurred within the buffer time.
                </Paragraph>
                <Paragraph Style="{StaticResource DefaultsText}">
                    <Run Foreground="#30aacc">[Default]</Run>
                    <LineBreak/>
                    30 seconds
                </Paragraph>
                
                <!-- Whitelist -->
                <Paragraph Name="Whitelist"
                           Style="{StaticResource HeaderText}">
                    Whitelist
                </Paragraph>
                <Paragraph Style="{StaticResource ParagraphText}">
                    Use the
                    <Bold><Italic>Whitelist</Italic></Bold> tab to enter IP addresses to ignore.
                    All ICMP, TCP, and UDP connections from IP addresses in the list are completely ignored by tcpTrigger.
                    You can optionally enter a port number to ignore only when the IP connects to the specified port.
                    Enter one address per line and use the
                    <Italic>Add</Italic> button for additional entries.
                </Paragraph>
                <Paragraph Style="{StaticResource SubHeaderText}">
                    IP Address
                </Paragraph>
                <Paragraph Style="{StaticResource ParagraphText}">
                    Enter the IP address to ignore in the
                    <Italic>IP address</Italic> field. One address per entry. DNS names are not supported.
                </Paragraph>
                <Paragraph Style="{StaticResource SubHeaderText}">
                    Port
                    <Run Foreground="#ffffff" FontStyle="Italic" FontWeight="Regular">(Optional)</Run>
                </Paragraph>
                <Paragraph Style="{StaticResource ParagraphText}">
                    If the
                    <Italic>port</Italic> field is left blank, all connections from the IP address are ignored.
                    To ignore only connections to a specific port, enter the port number.
                    One port per entry. Add additional entries for multiple ports.
                    To ignore ICMP requests, type
                    <Run FontWeight="SemiBold" Foreground="#cd6ed1">icmp</Run>
                    into the port field.
                </Paragraph>
                <Paragraph Style="{StaticResource SubHeaderText}">
                    Comment
                    <Run Foreground="#ffffff" FontStyle="Italic" FontWeight="Regular">(Optional)</Run>
                </Paragraph>
                <Paragraph Style="{StaticResource ParagraphText}">
                    The
                    <Italic>comment</Italic> field is for recording notes. It is for your reference only and is
                    useful for giving a description to each entry.
                </Paragraph>

                <!-- Devices -->
                <Paragraph Name="Devices"
                           Style="{StaticResource HeaderText}">
                    Devices
                </Paragraph>
                <Paragraph Style="{StaticResource ParagraphText}">
                    tcpTrigger monitors traffic on all network interfaces with an IPv4 address.
                    Devices with multiple IP addresses are supported and detected as well. However, IPv6 addresses
                    are not supported.
                    <LineBreak/>
                    <LineBreak/>
                    Use the
                    <Bold><Italic>Devices</Italic></Bold> tab to review the network interfaces and IP addresses
                    that tcpTrigger will monitor.
                    You can optionally exclude any device you do not want to monitor.
                </Paragraph>

                <!-- Service Status -->
                <Paragraph Name="ServiceStatus"
                           Style="{StaticResource HeaderText}">
                    Service Status
                </Paragraph>
                <Paragraph Style="{StaticResource ParagraphText}">
                    Use the
                    <Bold>
                        <Italic>Status</Italic>
                    </Bold> tab to view the current state of
                    the tcpTrigger service in Windows. You can optionally
                    stop and start the service as needed.
                    <LineBreak/>
                    <LineBreak/>
                    A log of diagnostic and status events recorded by the tcpTrigger
                    service is displayed and updated in real time. The
                    events are retreived from the Windows event log.
                    This can be useful for troubleshooting when your
                    actions are not performing as expected, because errors
                    from the tcpTrigger service will show here. Alternatively,
                    the same information can be viewed using the Windows event
                    viewer. Events relating to the tcpTrigger service are found
                    in the <Italic>Application</Italic> log and use
                    <Italic>tcpTrigger</Italic> for the event source.
                    <LineBreak/>
                    <LineBreak/>
                    Additionally, events that involve Windows shutting down
                    and starting up are displayed.
                </Paragraph>
            </FlowDocument>
        </FlowDocumentScrollViewer>
    </Grid>
</Window>